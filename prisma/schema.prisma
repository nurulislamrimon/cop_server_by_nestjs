// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatusEnum {
  active
  inactive
  postpond
  blocked
  terminated
  deleted
}

// while creating a new model make sure added the model to the IModelMapping else filter and search will not work
model Member {
  id              Int                 @id
  full_name       String
  father_name     String?
  mother_name     String?
  date_of_birth   DateTime?
  phone_number    String
  email           String              @unique
  password        String
  role            String?
  profile_photo   String?
  address         String?
  is_active       Boolean             @default(true)
  account_status  AccountStatusEnum   @default(active)
  occupation      String              @default("Student")
  reffered_by     String              @default("Nurul Islam Rimon")
  joining_date    DateTime            @default(now())
  // dates
  created_at      DateTime            @default(now())
  updated_at      DateTime?           @updatedAt
  deleted_at      DateTime?
  access_rule     Member_access_rule? @relation("AdministatorToAccessrule", fields: [role], references: [role])
  member_sessions Member_session[]    @relation("SessionToMember")
  committee       Committee[]         @relation("CommitteeToMember")
  transaction     Transaction[]       @relation("TransactionToMember")
  collected       Transaction[]       @relation("CollectorToMember")
  trx_approved    Transaction[]       @relation("ApproverToMember")
  created_trx     Transaction[]       @relation("CreatedByToMember")

  @@index([email])
}

model Member_session {
  id         Int       @id @default(autoincrement())
  ip         String
  user_agent String
  device     String
  platform   String
  browser    String
  // dates
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
  member_id  Int
  member     Member?   @relation("SessionToMember", fields: [member_id], references: [id], onDelete: Cascade)
}

model Member_access_rule {
  id         Int       @id @default(autoincrement())
  role       String    @unique
  rules      Json
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
  member     Member[]  @relation("AdministatorToAccessrule")
}

model Committee {
  id                Int                 @id @default(autoincrement())
  type_of_committee Committee_type_enum @default(executive)
  designation       String
  member_id         Int?
  // date fields
  selected_at       DateTime            @default(now())
  valid_till        DateTime?
  created_at        DateTime            @default(now())
  updated_at        DateTime?           @updatedAt
  deleted_at        DateTime?
  member            Member?             @relation("CommitteeToMember", fields: [member_id], references: [id], onDelete: Cascade)

  @@unique([designation, member_id])
}

enum Committee_type_enum {
  director
  executive
}

model Transaction {
  id            Int                   @id @default(autoincrement())
  trx_type      Transaction_type_enum @default(Deposit)
  amount        Int
  note          String?
  member_id     Int
  created_by_id Int?
  collector_id  Int?
  approver_id   Int?
  collected_at  DateTime              @default(now())
  created_at    DateTime              @default(now())
  updated_at    DateTime?             @updatedAt
  deleted_at    DateTime?
  member        Member?               @relation("TransactionToMember", fields: [member_id], references: [id], onDelete: Cascade)
  created_by    Member?               @relation("CreatedByToMember", fields: [created_by_id], references: [id], onDelete: SetNull)
  collector     Member?               @relation("CollectorToMember", fields: [collector_id], references: [id], onDelete: Cascade)
  approver      Member?               @relation("ApproverToMember", fields: [approver_id], references: [id], onDelete: Cascade)
}

enum Transaction_type_enum {
  Deposit
  Withdraw
  Profit
  Loss
  Expense
  Investment
}
